term,formula,func,ui,fitting,fittedlinear,withMathJax('Formula $$f(x) = \\beta+\\alpha x$$'),"function(x) {                isolate({                    linear_beta=as.numeric(input$linear_beta)                    linear_alpha=as.numeric(input$linear_alpha)                    invalid=is.na(linear_beta) | is.na(linear_alpha)                    func=linear_beta + linear_alpha * x                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 6,                        numericInput(                            inputId='linear_beta',                            label=withMathJax('$$\\beta$$'),                            value=0                        )                    ),                    column(width = 6,                        numericInput(                            inputId='linear_alpha',                            label=withMathJax('$$\\alpha$$'),                            value=1                        )                    )                )","try(                nlsLM(Response ~ alpha * Dose + beta,                    data=rv$data_filtered,                    start = list(alpha=1,                        beta=1)                ),                silent = T            )","function(x) {                    coef(fit)['alpha'] * x + coef(fit)['beta']                }"power,withMathJax('Formula $$f(x) = \\alpha x^\\beta$$'),"function(x) {                isolate({                    power_alpha=as.numeric(input$power_alpha)                    power_beta=as.numeric(input$power_beta)                    invalid=is.na(power_alpha) | is.na(power_beta)                    func=power_alpha * x ^ power_beta                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 6,                        numericInput(                            inputId='power_alpha',                            label=withMathJax('$$\\alpha$$'),                            value=1                        )                    ),                    column(width = 6,                        numericInput(                            inputId='power_beta',                            label=withMathJax('$$\\beta$$'),                            value=2                        )                    )                )","try(                nlsLM(Response ~ alpha + Dose ^ beta,                    data=rv$data_filtered,                    start = list(alpha=input$power_alpha,                        beta=input$power_beta)                ),                silent = T            )","function(x) {                    coef(fit)['alpha'] + x ^ coef(fit)['beta']                }"logistic,withMathJax('Formula $$f(x) = \\frac{k}{1+e^{-\\alpha (x-\\beta )}}$$'),"function(x) {                isolate({                    logistic_k=as.numeric(input$logistic_k)                    logistic_alpha=as.numeric(input$logistic_alpha)                    logistic_beta=as.numeric(input$logistic_beta)                    invalid=is.na(logistic_k) | is.na(logistic_alpha) | is.na(logistic_beta)                    func=logistic_k / (1 + exp(-logistic_alpha * (x - logistic_beta )))                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 4,                        numericInput(                            inputId='logistic_k',                            label=withMathJax('$$k$$'),                            value=0.1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='logistic_alpha',                            label=withMathJax('$$\\alpha $$'),                            value=1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='logistic_beta',                            label=withMathJax('$$\\beta $$'),                            value=5                        )                    )                )","try(                nlsLM(Response ~ k / (1 + exp(-alpha * (Dose - beta ))),                    data=rv$data_filtered,                    start = list(k=input$logistic_k,                        alpha=input$logistic_alpha,                        beta=input$logistic_beta)                ),                silent = T            )","function(x) {                    coef(fit)['k']  / (1 + exp(-coef(fit)['alpha'] * (x - coef(fit)['beta'] )))                }"bi-logistic,withMathJax('Formula $$f(x) = \\frac{k_1}{1+e^{-\\alpha_1 (x-\\beta_1 )}} + \\frac{k_2}{2+e^{-\\alpha_2 (x-\\beta_2 )}}$$'),"function(x) {                isolate({                    bi_logistic_k_1=as.numeric(input$bi_logistic_k_1)                    bi_logistic_alpha_1=as.numeric(input$bi_logistic_alpha_1)                    bi_logistic_beta_1=as.numeric(input$bi_logistic_beta_1)                    bi_logistic_k_2=as.numeric(input$bi_logistic_k_2)                    bi_logistic_alpha_2=as.numeric(input$bi_logistic_alpha_2)                    bi_logistic_beta_2=as.numeric(input$bi_logistic_beta_2)                    invalid=is.na(bi_logistic_k_1) | is.na(bi_logistic_alpha_1) | is.na(bi_logistic_beta_1) | is.na(bi_logistic_k_2) | is.na(bi_logistic_alpha_2) | is.na(bi_logistic_beta_2)                    func=bi_logistic_k_1 / (1 + exp(-bi_logistic_alpha_1 * (x - bi_logistic_beta_1 ))) + bi_logistic_k_2 / (1 + exp(-bi_logistic_alpha_2 * (x - bi_logistic_beta_2 )))                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 4,                        numericInput(                            inputId='bi_logistic_k_1',                            label=withMathJax('$$k_1$$'),                            value=0.1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_alpha_1',                            label=withMathJax('$$\\alpha_1 $$'),                            value=1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_beta_1',                            label=withMathJax('$$\\beta_1 $$'),                            value=5                        )                    )                ),                fluidRow(                    column(width = 4,                        numericInput(                            inputId='bi_logistic_k_2',                            label=withMathJax('$$k_2$$'),                            value=0.1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_alpha_2',                            label=withMathJax('$$\\alpha_2 $$'),                            value=1                        )                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_beta_2',                            label=withMathJax('$$\\beta_2 $$'),                            value=5                        )                    )                )","try(                nlsLM(Response ~ k_1 / (1 + exp(-alpha_1 * (Dose - beta_1 ))) + k_2 / (1 + exp(-alpha_2 * (Dose - beta_2 ))),                    data=rv$data_filtered,                    start = list(k_1=input$bi_logistic_k_1,                        alpha_1=input$bi_logistic_alpha_1,                        beta_1=input$bi_logistic_beta_1,                        k_2=input$bi_logistic_k_2,                        alpha_2=input$bi_logistic_alpha_2,                        beta_2=input$bi_logistic_beta_2)                ),                silent = T            )","function(x) {                    coef(fit)['k_1']  / (1 + exp(-coef(fit)['alpha_1'] * (x - coef(fit)['beta_1'] ))) + coef(fit)['k_2']  / (1 + exp(-coef(fit)['alpha_2'] * (x - coef(fit)['beta_2'] )))                }"