term,definition,formula,func,ui,fitting,fittedlinear,"Simple linear regression fits a straight line through the set of n points in such a way that makes vertical distances between the points of the data set and the fitted line as small as possible.","div(hr(),strong('Formula $$f(x) = \\alpha x + \\beta$$'))","function(x) {                isolate({                    linear_beta=as.numeric(input$linear_beta)                    linear_alpha=as.numeric(input$linear_alpha)                    invalid=is.na(linear_beta) | is.na(linear_alpha)                    func= linear_alpha * x + linear_beta                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 6,                        numericInput(                            inputId='linear_alpha',                            label=withMathJax('$$\\alpha$$'),                            value=1                        ),                        bsTooltip(							id='linear_alpha',							title='The slope of the line',							trigger='focus',							placement='top'						)                    ),                    column(width = 6,                        numericInput(                            inputId='linear_beta',                            label=withMathJax('$$\\beta$$'),                            value=0                        ),                        bsTooltip(							id='linear_beta',							title='The intercept of the line',							trigger='focus',							placement='top'						)                    )                )","try(                nlsLM(Response ~ alpha * Dose + beta,                    data=rv$data_filtered,                    start = list(alpha=1,                        beta=1)                ),                silent = T            )","function(x) {                    coef(fit)['alpha'] * x + coef(fit)['beta']                }"power,"Power regression, also known as log-log regression. The function is based on the function Linear regression, with both axes scaled logarithmically.","div(hr(),strong('Formula $$f(x) = \\alpha x^\\beta$$'))","function(x) {                isolate({                    power_alpha=as.numeric(input$power_alpha)                    power_beta=as.numeric(input$power_beta)                    invalid=is.na(power_alpha) | is.na(power_beta)                    func=power_alpha * x ^ power_beta                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 6,                        numericInput(                            inputId='power_alpha',                            label=withMathJax('$$\\alpha$$'),                            value=1                        ),                        bsTooltip(							id='power_alpha',							title='The constant of proportionality, which changes the placement of the curve',							trigger='focus',							placement='top'						)                    ),                    column(width = 6,                        numericInput(                            inputId='power_beta',                            label=withMathJax('$$\\beta$$'),                            value=2                        ),                        bsTooltip(							id='power_beta',							title='The exponent, which greatly changes shape of the curve',							trigger='focus',							placement='top'						)                    )                )","try(                nlsLM(Response ~ alpha + Dose ^ beta,                    data=rv$data_filtered,                    start = list(alpha=input$power_alpha,                        beta=input$power_beta)                ),                silent = T            )","function(x) {                    coef(fit)['alpha'] + x ^ coef(fit)['beta']                }"logistic,"Logistic model is described by a common S-shape curve. The initial stage of response is approximately exponential; then, as dose increases, the response slows and finally reaches the maximum.","div(hr(),strong('Formula $$f(x) = \\frac{k}{1+e^{-\\alpha (x-\\beta )}}$$'))","function(x) {                isolate({                    logistic_k=as.numeric(input$logistic_k)                    logistic_alpha=as.numeric(input$logistic_alpha)                    logistic_beta=as.numeric(input$logistic_beta)                    invalid=is.na(logistic_k) | is.na(logistic_alpha) | is.na(logistic_beta)                    func=logistic_k / (1 + exp(-logistic_alpha * (x - logistic_beta )))                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 4,                        numericInput(                            inputId='logistic_k',                            label=withMathJax('$$k$$'),                            value=0.1                        ),                        bsTooltip(							id='logistic_k',							title='The maximum value of the curve',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='logistic_alpha',                            label=withMathJax('$$\\alpha $$'),                            value=1                        ),                        bsTooltip(							id='logistic_alpha',							title='The steepness of the curve',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='logistic_beta',                            label=withMathJax('$$\\beta $$'),                            value=5                        ),                        bsTooltip(							id='logistic_beta',							title='The value of dose for the midpoint in the sigmoid curve',							trigger='focus',							placement='top'						)                    )                )","try(                nlsLM(Response ~ k / (1 + exp(-alpha * (Dose - beta ))),                    data=rv$data_filtered,                    start = list(k=input$logistic_k,                        alpha=input$logistic_alpha,                        beta=input$logistic_beta)                ),                silent = T            )","function(x) {                    coef(fit)['k']  / (1 + exp(-coef(fit)['alpha'] * (x - coef(fit)['beta'] )))                }"bi-logistic,"Bi-logistic model is presented for the analysis of systems that experience two phases of logistic model, either overlapping or sequentially, which is useful in modeling many systems that contain complex response processes not well modeled by the simple logistic.","div(hr(),strong('Formula $$f(x) = \\frac{k_1}{1+e^{-\\alpha_1 (x-\\beta_1 )}} + \\frac{k_2}{2+e^{-\\alpha_2 (x-\\beta_2 )}}$$'))","function(x) {                isolate({                    bi_logistic_k_1=as.numeric(input$bi_logistic_k_1)                    bi_logistic_alpha_1=as.numeric(input$bi_logistic_alpha_1)                    bi_logistic_beta_1=as.numeric(input$bi_logistic_beta_1)                    bi_logistic_k_2=as.numeric(input$bi_logistic_k_2)                    bi_logistic_alpha_2=as.numeric(input$bi_logistic_alpha_2)                    bi_logistic_beta_2=as.numeric(input$bi_logistic_beta_2)                    invalid=is.na(bi_logistic_k_1) | is.na(bi_logistic_alpha_1) | is.na(bi_logistic_beta_1) | is.na(bi_logistic_k_2) | is.na(bi_logistic_alpha_2) | is.na(bi_logistic_beta_2)                    func=bi_logistic_k_1 / (1 + exp(-bi_logistic_alpha_1 * (x - bi_logistic_beta_1 ))) + bi_logistic_k_2 / (1 + exp(-bi_logistic_alpha_2 * (x - bi_logistic_beta_2 )))                    ifelse(invalid ,return(NULL),return ( func ))                })            }","fluidRow(                    column(width = 4,                        numericInput(                            inputId='bi_logistic_k_1',                            label=withMathJax('$$k_1$$'),                            value=0.1                        ),                        bsTooltip(							id='bi_logistic_k_1',							title='The maximum value of the curve for the first stage',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_alpha_1',                            label=withMathJax('$$\\alpha_1 $$'),                            value=1                        ),                        bsTooltip(							id='bi_logistic_alpha_1',							title='The steepness of the curve for the first stage',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_beta_1',                            label=withMathJax('$$\\beta_1 $$'),                            value=5                        ),                        bsTooltip(							id='bi_logistic_beta_1',							title='The value of dose for the midpoint in the sigmoid curve for the first stage',							trigger='focus',							placement='top'						)                    )                ),                fluidRow(                    column(width = 4,                        numericInput(                            inputId='bi_logistic_k_2',                            label=withMathJax('$$k_2$$'),                            value=0.1                        ),                        bsTooltip(							id='bi_logistic_k_2',							title='The maximum value of the curve for the second stage',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_alpha_2',                            label=withMathJax('$$\\alpha_2 $$'),                            value=1                        ),                        bsTooltip(							id='bi_logistic_alpha_2',							title='The steepness of the curve for the second stage',							trigger='focus',							placement='top'						)                    ),                    column(width = 4,                        numericInput(                            inputId='bi_logistic_beta_2',                            label=withMathJax('$$\\beta_2 $$'),                            value=5                        ),                        bsTooltip(							id='bi_logistic_beta_2',							title='The value of dose for the midpoint in the sigmoid curve for the second stage',							trigger='focus',							placement='top'						)                    )                )","try(                nlsLM(Response ~ k_1 / (1 + exp(-alpha_1 * (Dose - beta_1 ))) + k_2 / (1 + exp(-alpha_2 * (Dose - beta_2 ))),                    data=rv$data_filtered,                    start = list(k_1=input$bi_logistic_k_1,                        alpha_1=input$bi_logistic_alpha_1,                        beta_1=input$bi_logistic_beta_1,                        k_2=input$bi_logistic_k_2,                        alpha_2=input$bi_logistic_alpha_2,                        beta_2=input$bi_logistic_beta_2)                ),                silent = T            )","function(x) {                    coef(fit)['k_1']  / (1 + exp(-coef(fit)['alpha_1'] * (x - coef(fit)['beta_1'] ))) + coef(fit)['k_2']  / (1 + exp(-coef(fit)['alpha_2'] * (x - coef(fit)['beta_2'] )))                }"